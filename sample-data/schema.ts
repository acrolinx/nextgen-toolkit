/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/rewrites/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Submit a document for editing
     * @description Uploads a .txt file and starts the Helios One editing workflow.
     */
    post: operations['Demo Tool-submit_edit_workflow'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/rewrites/{workflow_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get the status of an edit workflow
     * @description Returns the current status of a Helios One editing workflow.
     */
    get: operations['Demo Tool-get_edit_status'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/checks/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Submit a document for checking
     * @description Uploads a document (PDF) and starts the Helios One editing workflow.
     */
    post: operations['Demo Tool-submit_check_workflow'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style-guides': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Style Guides
     * @description Get all style guides. Keys are style guide IDs and values are style guide names.
     */
    get: operations['Style Guides-get_style_guides'];
    put?: never;
    /** Create Style Guide */
    post: operations['Style Guides-create_style_guide'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style-guides/{style_guide_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Style Guide */
    get: operations['Style Guides-get_style_guide'];
    /** Update Style Guide */
    put: operations['Style Guides-update_style_guide'];
    post?: never;
    /** Delete Style Guide */
    delete: operations['Style Guides-delete_style_guide'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style/checks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Style Check
     * @description Start a style and brand check run. Returns a workflow ID for each file.
     */
    post: operations['Style Checks-create_style_check'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style/checks/{workflow_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Style Check
     * @description get the results of a style and brand check run.
     */
    get: operations['Style Checks-get_style_check'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style/suggestions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Style Suggestion
     * @description Start a style and brand suggestion run. Returns a workflow ID for each file.
     */
    post: operations['Style Suggestions-create_style_suggestion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style/suggestions/{workflow_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Style Suggestion
     * @description Get the results of a suggestion run.
     */
    get: operations['Style Suggestions-get_style_suggestion'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style/rewrites': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Style Rewrite
     * @description Start a rewrite run for one or many files. Returns a workflow ID for each file.
     */
    post: operations['Style Rewrites-create_style_rewrite'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/style/rewrites/{workflow_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Style Rewrite
     * @description Get the results of a rewrite run.
     */
    get: operations['Style Rewrites-get_style_rewrite'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/internal/v1/constants': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Admin Constants */
    get: operations['Internal-get_admin_constants'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/internal/v1/demo-feedback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Submit Feedback */
    post: operations['Internal-submit_feedback'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AcrolinxScorerActivityOutput */
    AcrolinxScorerActivityOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /**
       * Error
       * @description The error that occurred during the activity
       */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      /** Issues */
      issues?: components['schemas']['helios_one__activities__acrolinx_scorer__models__Issue'][];
      /**
       * Score
       * @default -1
       */
      score: number;
    };
    /** Analysis */
    Analysis: {
      /**
       * Avg Sentence Length
       * @default -1
       */
      avg_sentence_length: number;
      /**
       * Avg Word Length
       * @default -1
       */
      avg_word_length: number;
      /**
       * Complexity Score
       * @default -1
       */
      complexity_score: number;
      /**
       * Readability Score
       * @default -1
       */
      readability_score: number;
      /**
       * Sentence Count
       * @default -1
       */
      sentence_count: number;
      /**
       * Vocabulary Score
       * @default -1
       */
      vocabulary_score: number;
      /**
       * Word Count
       * @default -1
       */
      word_count: number;
    };
    /** Body_Demo Tool-submit_check_workflow */
    'Body_Demo_Tool-submit_check_workflow': {
      /** @description The intended dialect of the text to check. */
      dialect: components['schemas']['Dialects'];
      /** @description The intended tone of the text to check. */
      tone: components['schemas']['Tones'];
      /** @description The intended style guide to use for the text to check. */
      style_guide: components['schemas']['StyleGuides'];
      /**
       * File
       * Format: binary
       * @description The .txt file to process.
       */
      file: string;
    };
    /** Body_Demo Tool-submit_edit_workflow */
    'Body_Demo_Tool-submit_edit_workflow': {
      /**
       * File
       * @description The .txt file to process.
       */
      file?: string | null;
      /**
       * @description The intended dialect of the text to edit.
       * @default american_english
       */
      dialect: components['schemas']['Dialects'];
      /**
       * @description The intended tone of the text to edit.
       * @default formal
       */
      tone: components['schemas']['Tones'];
      /**
       * @description The intended style guide to use for the text to edit.
       * @default microsoft
       */
      style_guide: components['schemas']['StyleGuides'];
      /**
       * Include Classic Score
       * @description Whether to score the text.
       * @default false
       */
      include_classic_score: boolean;
      /**
       * Url
       * @description The URL to scrape.
       * @default
       */
      url: string;
    };
    /** Color */
    Color: {
      /** Value */
      value: string;
      /** Min Score */
      min_score: number;
    };
    /** ConstantsResponse */
    ConstantsResponse: {
      /**
       * Dialects
       * @default [
       *       "american_english",
       *       "australian_english",
       *       "british_oxford",
       *       "canadian_english",
       *       "indian_english"
       *     ]
       */
      dialects: components['schemas']['Dialects'][];
      /**
       * Tones
       * @default [
       *       "academic",
       *       "business",
       *       "casual",
       *       "conversational",
       *       "formal",
       *       "gen-z",
       *       "informal",
       *       "technical"
       *     ]
       */
      tones: components['schemas']['Tones'][];
      /**
       * Style Guides
       * @default {
       *       "01971e03-dd27-75ee-9044-b48e654848cf": "ap",
       *       "01971e03-dd27-77d8-a6fa-5edb6a1f4ad2": "chicago",
       *       "01971e03-dd27-779f-b3ec-b724a2cf809f": "microsoft",
       *       "019755eb-b98f-79b0-84b2-5f09118083f1": "proofpoint"
       *     }
       */
      style_guides: {
        [key: string]: string;
      };
      /**
       * Colors
       * @default {
       *       "green": {
       *         "min_score": 80,
       *         "value": "rgb(120, 253, 134)"
       *       },
       *       "yellow": {
       *         "min_score": 60,
       *         "value": "rgb(246, 240, 104)"
       *       },
       *       "red": {
       *         "min_score": 0,
       *         "value": "rgb(235, 94, 94)"
       *       }
       *     }
       */
      colors: {
        [key: string]: components['schemas']['Color'];
      };
    };
    /**
     * ContentQualityFeedback
     * @enum {string}
     */
    ContentQualityFeedback:
      | 'Excellent content quality! Your text is clear, readable, and well-structured.'
      | 'Good content quality. Your text is readable but has room for improvement.'
      | 'Moderate content quality. Consider revising for better readability.'
      | 'Low content quality. The text needs significant revision for better readability.';
    /** ContentScorerActivityOutput */
    ContentScorerActivityOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /**
       * Error
       * @description The error that occurred during the activity
       */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      analysis?: components['schemas']['Analysis'] | null;
      feedback?: components['schemas']['ContentQualityFeedback'] | null;
      /**
       * Score
       * @default -1
       */
      score: number;
      /** Suggestions */
      suggestions?: components['schemas']['ContentSuggestions'][] | null;
      target_score?: components['schemas']['TargetScore'] | null;
    };
    /**
     * ContentSuggestions
     * @enum {string}
     */
    ContentSuggestions:
      | 'Use shorter sentences and simpler words to improve readability.'
      | 'Your text may be too complex. Consider simplifying vocabulary and sentence structure.'
      | 'Your sentences are quite long. Consider breaking them into shorter ones.'
      | 'Your sentences are very short. Consider combining some for better flow.'
      | 'Your vocabulary diversity is low. Try using a wider range of words.'
      | 'Your text is well-balanced. Consider proofreading for minor improvements.';
    /**
     * Dialects
     * @enum {string}
     */
    Dialects: 'american_english' | 'australian_english' | 'british_oxford' | 'canadian_english' | 'indian_english';
    /** EditStatusResponse */
    EditStatusResponse: {
      /** Workflow Id */
      workflow_id: string;
      status: components['schemas']['WorkflowStatus'];
      /** Run Id */
      run_id?: string | null;
      result?: components['schemas']['TheiaOutput'] | null;
      /** Error Message */
      error_message?: string | null;
    };
    /**
     * ErrorResponse
     * @description Standard error response model.
     */
    ErrorResponse: {
      /** Detail */
      detail: string;
    };
    /** FeedbackRequest */
    FeedbackRequest: {
      /** Workflow Id */
      workflow_id: string;
      /** Run Id */
      run_id: string;
      /** Helpful */
      helpful: boolean;
      /** Feedback */
      feedback?: string | null;
      /** Original */
      original?: string | null;
      /** Suggestion */
      suggestion?: string | null;
      /** Category */
      category?: string | null;
    };
    /** FinalScores */
    FinalScores: {
      acrolinx_score?: components['schemas']['AcrolinxScorerActivityOutput'] | null;
      content_score?: components['schemas']['ContentScorerActivityOutput'] | null;
    };
    /** GrammarActivityOutput */
    GrammarActivityOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /**
       * Error
       * @description The error that occurred during the activity
       */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      /** Changes */
      changes: components['schemas']['GrammarChange'][];
    };
    /**
     * GrammarCategory
     * @enum {string}
     */
    GrammarCategory: 'sva_pronoun' | 'punct_cap' | 'spelling' | 'syntax' | 'verbs' | 'word_usage' | 'other';
    /** GrammarChange */
    GrammarChange: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Modified
       * @description The modified text
       */
      modified: string;
      /**
       * Change Start Char Idx
       * @description The start index of the change
       */
      change_start_char_idx: number;
      category: components['schemas']['GrammarCategory'];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** HeliosOneWorkflowOutput */
    HeliosOneWorkflowOutput: {
      /**
       * Created At
       * @description The date and time the workflow was created
       */
      created_at: string;
      /**
       * Errors
       * @description The errors that occurred during the workflow
       */
      errors?: components['schemas']['WorkflowError'][];
      /** @description The initial scores of the workflow */
      initial_scores?: components['schemas']['InitialScores'];
      /** @description The final scores of the workflow */
      final_scores?: components['schemas']['FinalScores'];
      /**
       * Input File
       * @description The path to the input file
       */
      input_file: string;
      /** @description The parameters used to run the workflow */
      parameters?: components['schemas']['Parameters'];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      /** @description The result of the grammar activity */
      grammar_result?: components['schemas']['GrammarActivityOutput'] | null;
      /** @description The result of the merging activity */
      merging_result?: components['schemas']['MergingActivityOutput'] | null;
      /** @description The result of the parser activity */
      parser_result?: components['schemas']['ParserResponse'] | null;
      /** @description The result of the sentence length activity */
      sentence_length_result?: components['schemas']['SentenceLengthActivityOutput'] | null;
      /** @description The result of the sentence structure activity */
      sentence_structure_result?: components['schemas']['SentenceStructureOutput'] | null;
      /** @description The result of the simple vocabulary activity */
      simple_vocabulary_result?: components['schemas']['SimpleVocabOutput'] | null;
      /** @description The result of the tone activity */
      tone_result?: components['schemas']['ToneCheckOutput'] | null;
      /** @description The result of the style guide activity */
      style_guide_result?: components['schemas']['StyleGuideOutput'] | null;
    };
    /** InitialScores */
    InitialScores: {
      acrolinx_score?: components['schemas']['AcrolinxScorerActivityOutput'] | null;
      content_score?: components['schemas']['ContentScorerActivityOutput'] | null;
    };
    /**
     * IssueCategory
     * @enum {string}
     */
    IssueCategory: 'grammar' | 'simple_vocab' | 'sentence_structure' | 'sentence_length' | 'tone' | 'style_guide';
    /** MergingActivityOutput */
    MergingActivityOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /**
       * Error
       * @description The error that occurred during the activity
       */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      /**
       * Merged Text
       * @description Text after applying all changes
       */
      merged_text: string;
    };
    /** Options */
    Options: {
      style_guide?: components['schemas']['StyleGuide'] | null;
      dialect?: components['schemas']['Dialects'] | null;
      tone?: components['schemas']['Tones'] | null;
    };
    /** Parameters */
    Parameters: {
      /** @description The dialect used for the activity */
      dialect?: components['schemas']['Dialects'] | null;
      /** @description The tone used for the activity */
      tone?: components['schemas']['Tones'] | null;
      /** @description The style guide used for the activity */
      style_guide?: components['schemas']['StyleGuides'] | null;
      /**
       * Max Words
       * @description The maximum number of words allowed for the activity
       */
      max_words?: number | null;
    };
    /** ParserResponse */
    ParserResponse: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /**
       * Error
       * @description The error that occurred during the activity
       */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      /**
       * Extracted Text
       * @description The extracted text from the file.
       */
      extracted_text: string;
    };
    /** RewriteResponse */
    RewriteResponse: {
      status: components['schemas']['WorkflowStatus'];
      scores: components['schemas']['ScoreOutput'] | null;
      /** Issues */
      issues: components['schemas']['Suggestion'][];
      check_options: components['schemas']['Options'];
      /** Rewrite */
      rewrite?: string | null;
    };
    /** ScoreOutput */
    ScoreOutput: {
      /**
       * Avg Sentence Length
       * @default -1
       */
      avg_sentence_length: number;
      /**
       * Avg Word Length
       * @default -1
       */
      avg_word_length: number;
      /**
       * Complexity Score
       * @default -1
       */
      complexity_score: number;
      /**
       * Readability Score
       * @default -1
       */
      readability_score: number;
      /**
       * Sentence Count
       * @default -1
       */
      sentence_count: number;
      /**
       * Vocabulary Score
       * @default -1
       */
      vocabulary_score: number;
      /**
       * Word Count
       * @default -1
       */
      word_count: number;
      /**
       * Overall Score
       * @default -1
       */
      overall_score: number;
    };
    /** SentenceLengthActivityOutput */
    SentenceLengthActivityOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /** Error */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /** Run Id */
      run_id: string;
      /** Workflow Id */
      workflow_id: string;
      /** Text */
      text: string;
      /** Changes */
      changes: components['schemas']['SentenceLengthChange'][];
    };
    /**
     * SentenceLengthCategory
     * @enum {string}
     */
    SentenceLengthCategory: 'capitalization' | 'remove' | 'extract' | 'shorten' | 'deletion' | 'replace' | 'other';
    /** SentenceLengthChange */
    SentenceLengthChange: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Modified
       * @description The modified text
       */
      modified: string;
      /**
       * Change Start Char Idx
       * @description The start index of the change
       */
      change_start_char_idx: number;
      category: components['schemas']['SentenceLengthCategory'];
    };
    /**
     * SentenceStructureCategory
     * @enum {string}
     */
    SentenceStructureCategory:
      | 'complex_verbs'
      | 'hidden_verbs'
      | 'insertion'
      | 'modal_verbs'
      | 'passive'
      | 'phrasal_verbs'
      | 'subjunctive'
      | 'other';
    /** SentenceStructureChange */
    SentenceStructureChange: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Modified
       * @description The modified text
       */
      modified: string;
      /**
       * Change Start Char Idx
       * @description The start index of the change
       */
      change_start_char_idx: number;
      category: components['schemas']['SentenceStructureCategory'];
    };
    /** SentenceStructureOutput */
    SentenceStructureOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /** Error */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /** Run Id */
      run_id: string;
      /** Workflow Id */
      workflow_id: string;
      /** Text */
      text: string;
      /** Changes */
      changes: components['schemas']['SentenceStructureChange'][];
    };
    /**
     * SimpleVocabCategory
     * @enum {string}
     */
    SimpleVocabCategory: 'vocabulary' | 'other';
    /** SimpleVocabChange */
    SimpleVocabChange: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Modified
       * @description The modified text
       */
      modified: string;
      /**
       * Change Start Char Idx
       * @description The start index of the change
       */
      change_start_char_idx: number;
      category: components['schemas']['SimpleVocabCategory'];
    };
    /** SimpleVocabOutput */
    SimpleVocabOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /** Error */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /** Run Id */
      run_id: string;
      /** Workflow Id */
      workflow_id: string;
      /** Text */
      text: string;
      /** Changes */
      changes: components['schemas']['SimpleVocabChange'][];
    };
    /**
     * StartCheckResponse
     * @description Response after successfully starting a check workflow.
     */
    StartCheckResponse: {
      /**
       * Message
       * @default Check workflow started successfully.
       */
      message: string;
      /** Workflow Id */
      workflow_id: string;
    };
    /**
     * StartEditResponse
     * @description Response after successfully starting a rewrite workflow.
     */
    StartEditResponse: {
      /**
       * Message
       * @default Rewrite workflow started successfully.
       */
      message: string;
      /** Workflow Id */
      workflow_id: string;
    };
    /** StyleCheckResponse */
    StyleCheckResponse: {
      status: components['schemas']['WorkflowStatus'];
      scores: components['schemas']['ScoreOutput'] | null;
      /** Issues */
      issues: components['schemas']['helios_one__api__schemas__v1__style__checks__Issue'][];
      check_options: components['schemas']['Options'];
    };
    /** StyleGuide */
    StyleGuide: {
      /** Id */
      id?: string | null;
      name?: components['schemas']['StyleGuides'] | null;
    };
    /**
     * StyleGuideCategory
     * @enum {string}
     */
    StyleGuideCategory:
      | 'punctuation'
      | 'capitalization'
      | 'grammar_and_usage'
      | 'numbers_and_dates'
      | 'formatting_and_structure'
      | 'other';
    /** StyleGuideChange */
    StyleGuideChange: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Modified
       * @description The modified text
       */
      modified: string;
      /**
       * Change Start Char Idx
       * @description The start index of the change
       */
      change_start_char_idx: number;
      category: components['schemas']['StyleGuideCategory'];
    };
    /** StyleGuideOutput */
    StyleGuideOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /**
       * Error
       * @description The error that occurred during the activity
       */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      /** Changes */
      changes: components['schemas']['StyleGuideChange'][];
    };
    /** StyleGuideRequestBody */
    StyleGuideRequestBody: {
      /**
       * File Upload
       * Format: binary
       * @description The file to process.
       */
      file_upload: string;
    };
    /**
     * StyleGuides
     * @enum {string}
     */
    StyleGuides: 'ap' | 'chicago' | 'microsoft' | 'proofpoint';
    /** StyleRequestBody */
    StyleRequestBody: {
      /**
       * File Upload
       * Format: binary
       * @description The file to process.
       */
      file_upload: string;
      /**
       * @description The intended dialect of the text to edit.
       * @default american_english
       */
      dialect: components['schemas']['Dialects'];
      /**
       * @description The intended tone of the text to edit.
       * @default formal
       */
      tone: components['schemas']['Tones'];
      /**
       * Style Guide
       * @description The style guide to use for the text to edit. Can be a style guide ID or the name of a generic style guide, e.g. 'ap', 'chicago', or 'microsoft'.
       * @default microsoft
       */
      style_guide: string;
    };
    /** Suggestion */
    Suggestion: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Char Index
       * @description The start index of the change
       */
      char_index: number;
      /**
       * Subcategory
       * @description The sub-category of the change
       */
      subcategory:
        | components['schemas']['GrammarCategory']
        | components['schemas']['SimpleVocabCategory']
        | components['schemas']['SentenceStructureCategory']
        | components['schemas']['SentenceLengthCategory']
        | components['schemas']['ToneCategory']
        | components['schemas']['StyleGuideCategory'];
      /** Suggestion */
      suggestion: string;
      readonly category: components['schemas']['IssueCategory'] | null;
    };
    /** SuggestionResponse */
    SuggestionResponse: {
      status: components['schemas']['WorkflowStatus'];
      scores: components['schemas']['ScoreOutput'] | null;
      /** Issues */
      issues: components['schemas']['Suggestion'][];
      check_options: components['schemas']['Options'];
    };
    /** TargetScore */
    TargetScore: {
      /**
       * Target Score
       * @default -1
       */
      target_score: number | null;
      /**
       * Target Range
       * @default -1
       */
      target_range: number | null;
      /**
       * Within Target
       * @default false
       */
      within_target: boolean | null;
    };
    /** TheiaOutput */
    TheiaOutput: {
      /**
       * Errors
       * @default []
       */
      errors: components['schemas']['WorkflowError'][];
      final_scores?: components['schemas']['FinalScores'] | null;
      initial_scores?: components['schemas']['InitialScores'] | null;
      /** Merged Text */
      merged_text: string;
      /** Original Text */
      original_text: string;
      /** Results */
      results: components['schemas']['HeliosOneWorkflowOutput'][];
    };
    /**
     * ToneCategory
     * @enum {string}
     */
    ToneCategory: 'word_choice' | 'syntax' | 'punctuation' | 'discourse_features' | 'implicit_style' | 'other';
    /** ToneChange */
    ToneChange: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Modified
       * @description The modified text
       */
      modified: string;
      /**
       * Change Start Char Idx
       * @description The start index of the change
       */
      change_start_char_idx: number;
      /** @description The category of the change */
      category: components['schemas']['ToneCategory'];
    };
    /** ToneCheckOutput */
    ToneCheckOutput: {
      /**
       * Msg Hash
       * @description The hash of the messages used to run the activity
       * @default
       */
      msg_hash: string;
      /**
       * Error
       * @description The error that occurred during the activity
       */
      error?: string | null;
      /**
       * Duration
       * @description The duration of the activity in seconds
       */
      duration: number;
      /**
       * Model
       * @description The model used to run the activity
       * @default
       */
      model: string;
      /** @description The parameters used to run the activity */
      parameters?: components['schemas']['Parameters'];
      /**
       * Prompt
       * @description The prompt used to run the activity
       */
      prompt?: {
        [key: string]: unknown;
      };
      /**
       * Completion
       * @description The completion used to run the activity
       */
      completion?: {
        [key: string]: unknown;
      };
      /**
       * Provider
       * @description The provider used to run the activity
       * @default
       */
      provider: string;
      /**
       * Repair Log
       * @description The LLM output's JSON repair log for the activity
       */
      repair_log?: {
        [key: string]: string;
      }[];
      /**
       * Run Id
       * @description The Temporal workflow run ID
       */
      run_id: string;
      /**
       * Workflow Id
       * @description The Temporal workflow ID
       */
      workflow_id: string;
      /**
       * Text
       * @description The original text
       */
      text: string;
      /**
       * Changes
       * @description Suggested changes to the text
       */
      changes: components['schemas']['ToneChange'][];
    };
    /**
     * Tones
     * @enum {string}
     */
    Tones: 'academic' | 'business' | 'casual' | 'conversational' | 'formal' | 'gen-z' | 'informal' | 'technical';
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** WorkflowError */
    WorkflowError: {
      /** Error */
      error: string;
    };
    /** WorkflowResponse */
    WorkflowResponse: {
      status: components['schemas']['WorkflowStatus'];
      /** Workflow Id */
      workflow_id: string;
    };
    /**
     * WorkflowStatus
     * @enum {string}
     */
    WorkflowStatus: 'running' | 'completed' | 'failed' | 'not_found';
    /** WorkflowStatusResponse */
    WorkflowStatusResponse: {
      /** Workflow Id */
      workflow_id: string;
      status: components['schemas']['WorkflowStatus'];
      /** Error Message */
      error_message?: string | null;
      result?: components['schemas']['TheiaOutput'] | null;
    };
    /** Issue */
    helios_one__activities__acrolinx_scorer__models__Issue: {
      /** Description */
      description: string;
      /** Originaltext */
      originalText: string;
      /** Position */
      position: number;
      /** Suggestedreplacements */
      suggestedReplacements: string[];
      /** Type */
      type: string;
    };
    /** Issue */
    helios_one__api__schemas__v1__style__checks__Issue: {
      /**
       * Original
       * @description The original text
       */
      original: string;
      /**
       * Char Index
       * @description The start index of the change
       */
      char_index: number;
      /**
       * Subcategory
       * @description The sub-category of the change
       */
      subcategory:
        | components['schemas']['GrammarCategory']
        | components['schemas']['SimpleVocabCategory']
        | components['schemas']['SentenceStructureCategory']
        | components['schemas']['SentenceLengthCategory']
        | components['schemas']['ToneCategory']
        | components['schemas']['StyleGuideCategory'];
      readonly category: components['schemas']['IssueCategory'] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  'Demo Tool-submit_edit_workflow': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['Body_Demo_Tool-submit_edit_workflow'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StartEditResponse'];
        };
      };
      /** @description Invalid input parameters or file */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Invalid API Key */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  'Demo Tool-get_edit_status': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The workflow ID to get the status for. */
        workflow_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['EditStatusResponse'];
        };
      };
      /** @description Invalid API Key */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Workflow not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  'Demo Tool-submit_check_workflow': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_Demo_Tool-submit_check_workflow'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StartCheckResponse'];
        };
      };
      /** @description Invalid input parameters or file */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Invalid API Key */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  'Style Guides-get_style_guides': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: components['schemas']['StyleGuides'];
          };
        };
      };
      /** @description Style guides */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          /** @example {
           *       "01971e03-dd27-75ee-9044-b48e654848cf": "ap",
           *       "01971e03-dd27-77d8-a6fa-5edb6a1f4ad2": "chicago",
           *       "01971e03-dd27-779f-b3ec-b724a2cf809f": "microsoft",
           *       "019755eb-b98f-79b0-84b2-5f09118083f1": "proofpoint"
           *     } */
          'application/json': unknown;
        };
      };
    };
  };
  'Style Guides-create_style_guide': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['StyleGuideRequestBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Guides-get_style_guide': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        style_guide_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Guides-update_style_guide': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        style_guide_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Guides-delete_style_guide': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        style_guide_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Checks-create_style_check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['StyleRequestBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WorkflowResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Checks-get_style_check': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workflow_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json':
            | components['schemas']['StyleCheckResponse']
            | components['schemas']['WorkflowStatusResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Suggestions-create_style_suggestion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['StyleRequestBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WorkflowResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Suggestions-get_style_suggestion': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workflow_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json':
            | components['schemas']['SuggestionResponse']
            | components['schemas']['WorkflowStatusResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Rewrites-create_style_rewrite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['StyleRequestBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WorkflowResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Style Rewrites-get_style_rewrite': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workflow_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json':
            | components['schemas']['RewriteResponse']
            | components['schemas']['WorkflowStatusResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  'Internal-get_admin_constants': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ConstantsResponse'];
        };
      };
    };
  };
  'Internal-submit_feedback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FeedbackRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
