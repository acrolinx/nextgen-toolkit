image: node:lts

stages:
  - build
  - deploy

build:
  stage: build
  script:
    - npm ci
    - npm run lint
    - npm run test:unit
    - npm run build
  artifacts:
    paths:
      - dist/

deploy:
  stage: deploy
  script:
    # Get the latest published version from GitLab registry
    - |
      LATEST_VERSION=$(npm view @${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} version || echo "0.0.0")
      CURRENT_VERSION=$(node -p "require('./package.json').version")
      
      # Compare versions and increment patch if needed
      if [ "$(printf '%s\n' "$LATEST_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" = "$LATEST_VERSION" ]; then
        # If latest published version is higher, increment from that
        npm version ${LATEST_VERSION} --no-git-tag-version
        npm version patch --no-git-tag-version
      else
        # If current version is higher, just use that
        npm version ${CURRENT_VERSION} --no-git-tag-version
      fi

    # Get the new version
    - NEW_VERSION=$(node -p "require('./package.json').version")

    # Publish package
    - npm publish

    # Create git tag
    - |
      git config --global user.email "${SERVICE_USER_EMAIL}"
      git config --global user.name "${SERVICE_USER_NAME}"
      git remote set-url origin "https://${SERVICE_USER_NAME}:${SERVICE_USER_GIT_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git"
      git add package.json package-lock.json
      git commit -m "chore: bump version to ${NEW_VERSION}"
      git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
      git push -o ci.skip origin HEAD:${CI_COMMIT_REF_NAME}
      git push -o ci.skip origin "v${NEW_VERSION}"
  only:
    - main
